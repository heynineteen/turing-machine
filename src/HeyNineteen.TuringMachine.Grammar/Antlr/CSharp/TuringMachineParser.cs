//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TuringMachine.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class TuringMachineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, VALID_CHAR=11, BLOCK_COMMENT=12, LINE_COMMENT=13, WS=14;
	public const int
		RULE_file = 0, RULE_machine = 1, RULE_step = 2, RULE_finalMConfiguration = 3, 
		RULE_operations = 4, RULE_operation = 5, RULE_moveLeft = 6, RULE_moveRight = 7, 
		RULE_erase = 8, RULE_print = 9, RULE_symbolSpecification = 10, RULE_mConfiguration = 11;
	public static readonly string[] ruleNames = {
		"file", "machine", "step", "finalMConfiguration", "operations", "operation", 
		"moveLeft", "moveRight", "erase", "print", "symbolSpecification", "mConfiguration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "';'", "','", "'L'", "'R'", "'E'", "'P'", "'none'", "'any'", 
		"'anyOrNone'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "VALID_CHAR", 
		"BLOCK_COMMENT", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TuringMachine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TuringMachineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TuringMachineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TuringMachineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MachineContext machine() {
			return GetRuleContext<MachineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TuringMachineParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			machine();
			State = 25;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StepContext[] step() {
			return GetRuleContexts<StepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step(int i) {
			return GetRuleContext<StepContext>(i);
		}
		public MachineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineContext machine() {
		MachineContext _localctx = new MachineContext(Context, State);
		EnterRule(_localctx, 2, RULE_machine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			step();
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VALID_CHAR) {
				{
				{
				State = 28;
				step();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MConfigurationContext mConfiguration() {
			return GetRuleContext<MConfigurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationsContext operations() {
			return GetRuleContext<OperationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinalMConfigurationContext finalMConfiguration() {
			return GetRuleContext<FinalMConfigurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolSpecificationContext symbolSpecification() {
			return GetRuleContext<SymbolSpecificationContext>(0);
		}
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterStep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitStep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		StepContext _localctx = new StepContext(Context, State);
		EnterRule(_localctx, 4, RULE_step);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			mConfiguration();
			State = 35;
			Match(T__0);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << VALID_CHAR))) != 0)) {
				{
				State = 36;
				symbolSpecification();
				}
			}

			State = 39;
			Match(T__0);
			State = 40;
			operations();
			State = 41;
			Match(T__0);
			State = 42;
			finalMConfiguration();
			State = 43;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinalMConfigurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_CHAR() { return GetTokens(TuringMachineParser.VALID_CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_CHAR(int i) {
			return GetToken(TuringMachineParser.VALID_CHAR, i);
		}
		public FinalMConfigurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finalMConfiguration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterFinalMConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitFinalMConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalMConfiguration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinalMConfigurationContext finalMConfiguration() {
		FinalMConfigurationContext _localctx = new FinalMConfigurationContext(Context, State);
		EnterRule(_localctx, 6, RULE_finalMConfiguration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 45;
				Match(VALID_CHAR);
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VALID_CHAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public OperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationsContext operations() {
		OperationsContext _localctx = new OperationsContext(Context, State);
		EnterRule(_localctx, 8, RULE_operations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6))) != 0)) {
				{
				State = 50;
				operation();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 51;
					Match(T__2);
					State = 52;
					operation();
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveLeftContext moveLeft() {
			return GetRuleContext<MoveLeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveRightContext moveRight() {
			return GetRuleContext<MoveRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EraseContext erase() {
			return GetRuleContext<EraseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 10, RULE_operation);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				moveLeft();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				moveRight();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				erase();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63;
				print();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveLeftContext : ParserRuleContext {
		public MoveLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveLeft; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterMoveLeft(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitMoveLeft(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveLeftContext moveLeft() {
		MoveLeftContext _localctx = new MoveLeftContext(Context, State);
		EnterRule(_localctx, 12, RULE_moveLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveRightContext : ParserRuleContext {
		public MoveRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveRight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterMoveRight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitMoveRight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveRightContext moveRight() {
		MoveRightContext _localctx = new MoveRightContext(Context, State);
		EnterRule(_localctx, 14, RULE_moveRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseContext : ParserRuleContext {
		public EraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterErase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitErase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseContext erase() {
		EraseContext _localctx = new EraseContext(Context, State);
		EnterRule(_localctx, 16, RULE_erase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_CHAR() { return GetToken(TuringMachineParser.VALID_CHAR, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 18, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(T__6);
			State = 73;
			Match(VALID_CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolSpecificationContext : ParserRuleContext {
		public SymbolSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolSpecification; } }
	 
		public SymbolSpecificationContext() { }
		public virtual void CopyFrom(SymbolSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolSymbolSpecificationContext : SymbolSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_CHAR() { return GetToken(TuringMachineParser.VALID_CHAR, 0); }
		public SymbolSymbolSpecificationContext(SymbolSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterSymbolSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitSymbolSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolSymbolSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneSymbolSpecificationContext : SymbolSpecificationContext {
		public NoneSymbolSpecificationContext(SymbolSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterNoneSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitNoneSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneSymbolSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnySymbolSpecificationContext : SymbolSpecificationContext {
		public AnySymbolSpecificationContext(SymbolSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterAnySymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitAnySymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnySymbolSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnyOrNoneSymbolSpecificationContext : SymbolSpecificationContext {
		public AnyOrNoneSymbolSpecificationContext(SymbolSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterAnyOrNoneSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitAnyOrNoneSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyOrNoneSymbolSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolSpecificationContext symbolSpecification() {
		SymbolSpecificationContext _localctx = new SymbolSpecificationContext(Context, State);
		EnterRule(_localctx, 20, RULE_symbolSpecification);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				_localctx = new NoneSymbolSpecificationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				Match(T__7);
				}
				break;
			case T__8:
				_localctx = new AnySymbolSpecificationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				Match(T__8);
				}
				break;
			case T__9:
				_localctx = new AnyOrNoneSymbolSpecificationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				Match(T__9);
				}
				break;
			case VALID_CHAR:
				_localctx = new SymbolSymbolSpecificationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 78;
				Match(VALID_CHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MConfigurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_CHAR() { return GetTokens(TuringMachineParser.VALID_CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_CHAR(int i) {
			return GetToken(TuringMachineParser.VALID_CHAR, i);
		}
		public MConfigurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mConfiguration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterMConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitMConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMConfiguration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MConfigurationContext mConfiguration() {
		MConfigurationContext _localctx = new MConfigurationContext(Context, State);
		EnterRule(_localctx, 22, RULE_mConfiguration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 81;
				Match(VALID_CHAR);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VALID_CHAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x10', 'Y', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', ' ', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', '#', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '(', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x6', '\x5', '\x31', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x32', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x38', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', ';', '\v', '\x6', '\x5', '\x6', '=', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x43', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'R', '\n', '\f', 
		'\x3', '\r', '\x6', '\r', 'U', '\n', '\r', '\r', '\r', '\xE', '\r', 'V', 
		'\x3', '\r', '\x2', '\x2', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', '\x2', '\x2', 'X', 
		'\x2', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '$', '\x3', '\x2', '\x2', '\x2', '\b', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\n', '<', '\x3', '\x2', '\x2', '\x2', '\f', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x46', '\x3', '\x2', '\x2', '\x2', '\x12', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'J', '\x3', '\x2', '\x2', '\x2', '\x16', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x18', 'T', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1B', '\x5', '\x4', '\x3', '\x2', '\x1B', '\x1C', '\a', '\x2', '\x2', 
		'\x3', '\x1C', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '!', '\x5', 
		'\x6', '\x4', '\x2', '\x1E', ' ', '\x5', '\x6', '\x4', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x5', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x5', '\x18', '\r', '\x2', '%', '\'', '\a', '\x3', 
		'\x2', '\x2', '&', '(', '\x5', '\x16', '\f', '\x2', '\'', '&', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\x3', '\x2', '\x2', '*', 
		'+', '\x5', '\n', '\x6', '\x2', '+', ',', '\a', '\x3', '\x2', '\x2', ',', 
		'-', '\x5', '\b', '\x5', '\x2', '-', '.', '\a', '\x4', '\x2', '\x2', '.', 
		'\a', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\a', '\r', '\x2', '\x2', 
		'\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x39', '\x5', '\f', '\a', '\x2', '\x35', '\x36', '\a', '\x5', 
		'\x2', '\x2', '\x36', '\x38', '\x5', '\f', '\a', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', 
		'\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x34', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '\v', '\x3', '\x2', '\x2', '\x2', '>', '\x43', 
		'\x5', '\xE', '\b', '\x2', '?', '\x43', '\x5', '\x10', '\t', '\x2', '@', 
		'\x43', '\x5', '\x12', '\n', '\x2', '\x41', '\x43', '\x5', '\x14', '\v', 
		'\x2', '\x42', '>', '\x3', '\x2', '\x2', '\x2', '\x42', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\x6', '\x2', '\x2', '\x45', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\a', '\a', '\x2', '\x2', 'G', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\a', '\b', '\x2', '\x2', 'I', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\t', '\x2', '\x2', 'K', 'L', 
		'\a', '\r', '\x2', '\x2', 'L', '\x15', '\x3', '\x2', '\x2', '\x2', 'M', 
		'R', '\a', '\n', '\x2', '\x2', 'N', 'R', '\a', '\v', '\x2', '\x2', 'O', 
		'R', '\a', '\f', '\x2', '\x2', 'P', 'R', '\a', '\r', '\x2', '\x2', 'Q', 
		'M', '\x3', '\x2', '\x2', '\x2', 'Q', 'N', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x17', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\a', '\r', '\x2', 
		'\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'W', '\x19', '\x3', '\x2', '\x2', '\x2', '\n', '!', '\'', '\x32', 
		'\x39', '<', '\x42', 'Q', 'V',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
