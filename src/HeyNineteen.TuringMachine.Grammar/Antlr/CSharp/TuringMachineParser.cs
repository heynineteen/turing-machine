//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TuringMachine.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class TuringMachineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, VALID_CHAR=11, BLOCK_COMMENT=12, LINE_COMMENT=13, WS=14;
	public const int
		RULE_file = 0, RULE_machine = 1, RULE_step = 2, RULE_finalMConfiguration = 3, 
		RULE_operations = 4, RULE_operation = 5, RULE_moveLeft = 6, RULE_moveRight = 7, 
		RULE_erase = 8, RULE_print = 9, RULE_symbolSpecification = 10, RULE_mConfiguration = 11;
	public static readonly string[] ruleNames = {
		"file", "machine", "step", "finalMConfiguration", "operations", "operation", 
		"moveLeft", "moveRight", "erase", "print", "symbolSpecification", "mConfiguration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "';'", "','", "'L'", "'R'", "'E'", "'P'", "'none'", "'any'", 
		"'anyOrNone'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "VALID_CHAR", 
		"BLOCK_COMMENT", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TuringMachine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TuringMachineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TuringMachineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TuringMachineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MachineContext machine() {
			return GetRuleContext<MachineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TuringMachineParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			machine();
			State = 25;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StepContext[] step() {
			return GetRuleContexts<StepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step(int i) {
			return GetRuleContext<StepContext>(i);
		}
		public MachineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineContext machine() {
		MachineContext _localctx = new MachineContext(Context, State);
		EnterRule(_localctx, 2, RULE_machine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			step();
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VALID_CHAR) {
				{
				{
				State = 28;
				step();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MConfigurationContext mConfiguration() {
			return GetRuleContext<MConfigurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationsContext operations() {
			return GetRuleContext<OperationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinalMConfigurationContext finalMConfiguration() {
			return GetRuleContext<FinalMConfigurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolSpecificationContext symbolSpecification() {
			return GetRuleContext<SymbolSpecificationContext>(0);
		}
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterStep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitStep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		StepContext _localctx = new StepContext(Context, State);
		EnterRule(_localctx, 4, RULE_step);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			mConfiguration();
			State = 35;
			Match(T__0);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3840L) != 0)) {
				{
				State = 36;
				symbolSpecification();
				}
			}

			State = 39;
			Match(T__0);
			State = 40;
			operations();
			State = 41;
			Match(T__0);
			State = 42;
			finalMConfiguration();
			State = 43;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinalMConfigurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_CHAR() { return GetTokens(TuringMachineParser.VALID_CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_CHAR(int i) {
			return GetToken(TuringMachineParser.VALID_CHAR, i);
		}
		public FinalMConfigurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finalMConfiguration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterFinalMConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitFinalMConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalMConfiguration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinalMConfigurationContext finalMConfiguration() {
		FinalMConfigurationContext _localctx = new FinalMConfigurationContext(Context, State);
		EnterRule(_localctx, 6, RULE_finalMConfiguration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 45;
				Match(VALID_CHAR);
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VALID_CHAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public OperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationsContext operations() {
		OperationsContext _localctx = new OperationsContext(Context, State);
		EnterRule(_localctx, 8, RULE_operations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 240L) != 0)) {
				{
				State = 50;
				operation();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 51;
					Match(T__2);
					State = 52;
					operation();
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveLeftContext moveLeft() {
			return GetRuleContext<MoveLeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveRightContext moveRight() {
			return GetRuleContext<MoveRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EraseContext erase() {
			return GetRuleContext<EraseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 10, RULE_operation);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				moveLeft();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				moveRight();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				erase();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63;
				print();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveLeftContext : ParserRuleContext {
		public MoveLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveLeft; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterMoveLeft(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitMoveLeft(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveLeftContext moveLeft() {
		MoveLeftContext _localctx = new MoveLeftContext(Context, State);
		EnterRule(_localctx, 12, RULE_moveLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveRightContext : ParserRuleContext {
		public MoveRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveRight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterMoveRight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitMoveRight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveRightContext moveRight() {
		MoveRightContext _localctx = new MoveRightContext(Context, State);
		EnterRule(_localctx, 14, RULE_moveRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseContext : ParserRuleContext {
		public EraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterErase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitErase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseContext erase() {
		EraseContext _localctx = new EraseContext(Context, State);
		EnterRule(_localctx, 16, RULE_erase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_CHAR() { return GetToken(TuringMachineParser.VALID_CHAR, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 18, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(T__6);
			State = 73;
			Match(VALID_CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolSpecificationContext : ParserRuleContext {
		public SymbolSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolSpecification; } }
	 
		public SymbolSpecificationContext() { }
		public virtual void CopyFrom(SymbolSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolSymbolSpecificationContext : SymbolSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_CHAR() { return GetToken(TuringMachineParser.VALID_CHAR, 0); }
		public SymbolSymbolSpecificationContext(SymbolSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterSymbolSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitSymbolSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolSymbolSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneSymbolSpecificationContext : SymbolSpecificationContext {
		public NoneSymbolSpecificationContext(SymbolSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterNoneSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitNoneSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneSymbolSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnySymbolSpecificationContext : SymbolSpecificationContext {
		public AnySymbolSpecificationContext(SymbolSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterAnySymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitAnySymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnySymbolSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnyOrNoneSymbolSpecificationContext : SymbolSpecificationContext {
		public AnyOrNoneSymbolSpecificationContext(SymbolSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterAnyOrNoneSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitAnyOrNoneSymbolSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyOrNoneSymbolSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolSpecificationContext symbolSpecification() {
		SymbolSpecificationContext _localctx = new SymbolSpecificationContext(Context, State);
		EnterRule(_localctx, 20, RULE_symbolSpecification);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				_localctx = new NoneSymbolSpecificationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				Match(T__7);
				}
				break;
			case T__8:
				_localctx = new AnySymbolSpecificationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				Match(T__8);
				}
				break;
			case T__9:
				_localctx = new AnyOrNoneSymbolSpecificationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				Match(T__9);
				}
				break;
			case VALID_CHAR:
				_localctx = new SymbolSymbolSpecificationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 78;
				Match(VALID_CHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MConfigurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_CHAR() { return GetTokens(TuringMachineParser.VALID_CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_CHAR(int i) {
			return GetToken(TuringMachineParser.VALID_CHAR, i);
		}
		public MConfigurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mConfiguration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.EnterMConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITuringMachineListener typedListener = listener as ITuringMachineListener;
			if (typedListener != null) typedListener.ExitMConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITuringMachineVisitor<TResult> typedVisitor = visitor as ITuringMachineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMConfiguration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MConfigurationContext mConfiguration() {
		MConfigurationContext _localctx = new MConfigurationContext(Context, State);
		EnterRule(_localctx, 22, RULE_mConfiguration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 81;
				Match(VALID_CHAR);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VALID_CHAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,87,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,1,1,1,5,1,30,8,1,
		10,1,12,1,33,9,1,1,2,1,2,1,2,3,2,38,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,4,
		3,47,8,3,11,3,12,3,48,1,4,1,4,1,4,5,4,54,8,4,10,4,12,4,57,9,4,3,4,59,8,
		4,1,5,1,5,1,5,1,5,3,5,65,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,
		1,10,1,10,1,10,3,10,80,8,10,1,11,4,11,83,8,11,11,11,12,11,84,1,11,0,0,
		12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,86,0,24,1,0,0,0,2,27,1,0,0,0,4,34,
		1,0,0,0,6,46,1,0,0,0,8,58,1,0,0,0,10,64,1,0,0,0,12,66,1,0,0,0,14,68,1,
		0,0,0,16,70,1,0,0,0,18,72,1,0,0,0,20,79,1,0,0,0,22,82,1,0,0,0,24,25,3,
		2,1,0,25,26,5,0,0,1,26,1,1,0,0,0,27,31,3,4,2,0,28,30,3,4,2,0,29,28,1,0,
		0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,3,1,0,0,0,33,31,1,0,0,
		0,34,35,3,22,11,0,35,37,5,1,0,0,36,38,3,20,10,0,37,36,1,0,0,0,37,38,1,
		0,0,0,38,39,1,0,0,0,39,40,5,1,0,0,40,41,3,8,4,0,41,42,5,1,0,0,42,43,3,
		6,3,0,43,44,5,2,0,0,44,5,1,0,0,0,45,47,5,11,0,0,46,45,1,0,0,0,47,48,1,
		0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,7,1,0,0,0,50,55,3,10,5,0,51,52,5,
		3,0,0,52,54,3,10,5,0,53,51,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,
		0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,58,50,1,0,0,0,58,59,1,0,0,0,59,9,1,0,
		0,0,60,65,3,12,6,0,61,65,3,14,7,0,62,65,3,16,8,0,63,65,3,18,9,0,64,60,
		1,0,0,0,64,61,1,0,0,0,64,62,1,0,0,0,64,63,1,0,0,0,65,11,1,0,0,0,66,67,
		5,4,0,0,67,13,1,0,0,0,68,69,5,5,0,0,69,15,1,0,0,0,70,71,5,6,0,0,71,17,
		1,0,0,0,72,73,5,7,0,0,73,74,5,11,0,0,74,19,1,0,0,0,75,80,5,8,0,0,76,80,
		5,9,0,0,77,80,5,10,0,0,78,80,5,11,0,0,79,75,1,0,0,0,79,76,1,0,0,0,79,77,
		1,0,0,0,79,78,1,0,0,0,80,21,1,0,0,0,81,83,5,11,0,0,82,81,1,0,0,0,83,84,
		1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,23,1,0,0,0,8,31,37,48,55,58,64,
		79,84
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
